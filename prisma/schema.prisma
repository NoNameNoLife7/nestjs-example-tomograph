generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model role {
  id Int @id @default(autoincrement())

  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  users user[]
}

model user {
  id Int @id @default(autoincrement())

  email     String @unique
  firstName String @db.VarChar(128)
  lastName  String @db.VarChar(255)

  createDate DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  active Boolean? @default(true)

  roleId Int
  role   role @relation(fields: [roleId], references: [id])
}

model patient {
  id Int @id @default(autoincrement())

  firstName     String    @db.VarChar(128)
  lastName      String    @db.VarChar(255)
  date          DateTime? @default(now())
  hospitalCode  String?   @db.VarChar(128)
  comorbidities String?   @db.VarChar(256)
  diagnostic    String?   @db.VarChar(128)
  active        Boolean?  @default(true)
  weight        Float?
  size          Float?

  sex       Sex       @default(U)
  skinColor SkinColor @default(U)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  tests test[]
}

model fan {
  id Int @id @default(autoincrement())

  name     String  @unique() @db.VarChar(256)
  model    String? @db.VarChar(256)
  protocol String? @db.VarChar(256)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  tests test[]
}

model log {
  id Int @id @default(autoincrement())

  noEvent Int?
  comment String?
  date    DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  eventId Int?
  event   event? @relation(fields: [eventId], references: [id])

  testId Int
  test   test @relation(fields: [testId], references: [id])
}

model image {
  id        Int       @id @default(autoincrement())
  date      DateTime?
  directory Json[]
  file      String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  testId Int
  test   test @relation(fields: [testId], references: [id])
}

model pathNode {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  parentId Int?
  parent   pathNode?  @relation("parenthood", fields: [parentId], references: [id])
  children pathNode[] @relation("parenthood")

  tests test[]
}

model equipmentConfiguration {
  id                 Int       @id @default(autoincrement())
  adjacent           Boolean?  @default(true)
  injectionFrequency Int?      @default(60)
  samplingRate       Int?      @default(15)
  direction          Direction
  jump               Int?      @default(1)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  tests test[]
}

model softwareConfiguration {
  id Int @id @default(autoincrement())

  dateTime DateTime? @default(now())

  brightness Float
  language   Language @default(ES)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  tests test[]
}

model communication {
  id       Int     @id @default(autoincrement())
  protocol String?
  version  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model event {
  id Int @id @default(autoincrement())

  active      Boolean? @default(true)
  event       String   @unique
  description String?

  eventType EventType @default(OtroEventoQueSeConsidereDeInteres)

  logs log[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model test {
  id Int @id @default(autoincrement())

  startDate   DateTime        @default(now())
  endDate     DateTime        @default(now())
  inclination Int
  peep        Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime?       @updatedAt
  directory   Json[]
  file        String?
  position    PatientPosition

  records record[]
  logs    log[]
  images  image[]

  patient   patient? @relation(fields: [patientId], references: [id])
  patientId Int?

  fan   fan? @relation(fields: [fanId], references: [id])
  fanId Int?

  softwareConfiguration   softwareConfiguration @relation(fields: [softwareConfigurationId], references: [id])
  softwareConfigurationId Int

  equipmentConfiguration   equipmentConfiguration @relation(fields: [equipmentConfigurationId], references: [id])
  equipmentConfigurationId Int

  pathNodes pathNode[]
}

model record {
  id Int @id @default(autoincrement())

  startDate DateTime @default(now())
  endDate   DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  testId Int
  test   test @relation(fields: [testId], references: [id])
}

enum SkinColor {
  U
  W
  B
}

enum Sex {
  U
  M
  F
}

enum Language {
  ES
  EN
}

enum Direction {
  IZQ_DER
  DER_IZQ
}

enum PatientPosition {
  BocaArriba
  BocaAbajo
  DePie
  LateralDerecho
  LateralIzquierdo
  Sentado
}

enum EventType {
  Respiratorio
  Cardiocirculatorios
  Otros
  Procederes
  VentilacionMecanica
  CambiosDeModalidadFania
  CambiosPostulares
  Medicamentos
  SufractantesPulmonares
  OtroEventoQueSeConsidereDeInteres
}
